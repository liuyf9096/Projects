#ifndef DMAGICIANPROTOCOL_H
#define DMAGICIANPROTOCOL_H

#include <QObject>
#include <QMap>
#include <QJsonObject>

#include "DPacket.h"

class DMagicianProtocol : public QObject
{
    Q_OBJECT
public:
    typedef QJsonObject (DMagicianProtocol::*ParseFunction)(quint8, QByteArray);
    typedef void (DMagicianProtocol::*EncodeFun)(PacketPayload &, QJsonObject);

    static DMagicianProtocol *getInstance();
    const QStringList getCommandList();

    /* parse params of payload for reading */
    QJsonObject parseParams(PacketPayload &payload);

    /* set payload for sending */
    bool setPayload(QString cmd, PacketPayload &payload, QJsonObject params);

private:
    explicit DMagicianProtocol(QObject *parent = nullptr);
    Q_DISABLE_COPY(DMagicianProtocol)

    QMap<QString, EncodeFun> m_encodeFuncMap;
    QMap<int, ParseFunction> m_parseFuncMap;

    void _packetFunctionInit();
    void _parseFunctionInit();

    inline QJsonObject addQueueIndexInfo(QJsonObject &resObj, QByteArray &params);

    /* 参考 "dobot-protocol-V1.2.0" */
    QJsonObject parseDeviceSN(quint8 rw, QByteArray params);            //0
    QJsonObject parseDeviceName(quint8 rw, QByteArray params);          //1
    QJsonObject parseDeviceVersion(quint8 rw, QByteArray params);       //2
    QJsonObject parseDeviceWithL(quint8 rw, QByteArray params);         //3
    QJsonObject parseDeviceTime(quint8 rw, QByteArray params);          //4
    QJsonObject parseDeviceID(quint8 rw, QByteArray params);            //5
    QJsonObject parseDeviceInfo(quint8 rw, QByteArray params);          //6
    QJsonObject parseProductName(quint8 rw, QByteArray params);         //7
    QJsonObject parseOLEDDisplay(quint8 rw, QByteArray params);         //8
    QJsonObject parseProgressBar(quint8 rw, QByteArray params);         //9

    QJsonObject parsePose(quint8 rw, QByteArray params);                //10
    QJsonObject parseResetPose(quint8 rw, QByteArray params);           //11
    QJsonObject parsePoseL(quint8 rw, QByteArray params);               //13
    QJsonObject parseCheckPoseLimit(quint8 rw, QByteArray params);      //15

    QJsonObject parseAlarmState(quint8 rw, QByteArray params);          //20

    QJsonObject parseHOMEParams(quint8 rw, QByteArray params);          //30
    QJsonObject parseHOMECmd(quint8 rw, QByteArray params);             //31
    QJsonObject parseAutoLeveling(quint8 rw, QByteArray params);        //32
    QJsonObject parseGoHomeStatus(quint8 rw, QByteArray params);        //33

    QJsonObject parseHHTTrigMode(quint8 rw, QByteArray params);         //40
    QJsonObject parseHHTTrigOutputEnabled(quint8 rw, QByteArray params);//41
    QJsonObject parseHHTTrigOutput(quint8 rw, QByteArray params);       //42

    QJsonObject parseArmOrientation(quint8 rw, QByteArray params);      //50
    QJsonObject parseMotorMode(quint8 rw, QByteArray params);           //51

    QJsonObject parseEndEffectorParams(quint8 rw, QByteArray params);   //60
    QJsonObject parseEndEffectorLaser(quint8 rw, QByteArray params);    //61
    QJsonObject parseEndEffectorSuctionCup(quint8 rw, QByteArray params);//62
    QJsonObject parseEndEffectorGripper(quint8 rw, QByteArray params);  //63
    QJsonObject parseEndEffectorType(quint8 rw, QByteArray params);     //64

    QJsonObject parseServoAngle(quint8 rw, QByteArray params);          //65
    QJsonObject parseArmSpeedRatio(quint8 rw, QByteArray params);       //66
    QJsonObject parseLSpeedRatio(quint8 rw, QByteArray params);         //67
    QJsonObject parseConfigAndStatus(quint8 rw, QByteArray params);     //68
    QJsonObject parseRTStatus(quint8 rw, QByteArray params);            //69

    QJsonObject parseJOGJointParams(quint8 rw, QByteArray params);      //70
    QJsonObject parseJOGCoordinateParams(quint8 rw, QByteArray params); //71
    QJsonObject parseJOGCommonParams(quint8 rw, QByteArray params);     //72
    QJsonObject parseJOGCmd(quint8 rw, QByteArray params);              //73
    QJsonObject parseJOGLParams(quint8 rw, QByteArray params);          //74

    QJsonObject parsePTPJointParams(quint8 rw, QByteArray params);      //80
    QJsonObject parsePTPCoordinateParams(quint8 rw, QByteArray params); //81
    QJsonObject parsePTPJumpParams(quint8 rw, QByteArray params);       //82
    QJsonObject parsePTPCommonParams(quint8 rw, QByteArray params);     //83
    QJsonObject parsePTPCmd(quint8 rw, QByteArray params);              //84
    QJsonObject parsePTPLParams(quint8 rw, QByteArray params);          //85
    QJsonObject parsePTPWithLCmd(quint8 rw, QByteArray params);         //86
    QJsonObject parsePTPJump2Params(quint8 rw, QByteArray params);      //87
    QJsonObject parsePTPPOCmd(quint8 rw, QByteArray params);            //88
    QJsonObject parsePTPPOWithLCmd(quint8 rw, QByteArray params);       //89

    QJsonObject parseCPParams(quint8 rw, QByteArray params);            //90
    QJsonObject parseCPCmd(quint8 rw, QByteArray params);               //91
    QJsonObject parseCPLECmd(quint8 rw, QByteArray params);             //92
    QJsonObject parseCPRHeadHoldEnable(quint8 rw, QByteArray params);   //93
    QJsonObject parseCPCommonParams(quint8 rw, QByteArray params);      //94
    QJsonObject parseCP2Cmd(quint8 rw, QByteArray params);              //95

    QJsonObject parseARCParams(quint8 rw, QByteArray params);           //100
    QJsonObject parseARCCmd(quint8 rw, QByteArray params);              //101
    QJsonObject parseCircleCmd(quint8 rw, QByteArray params);           //102
    QJsonObject parseARCCommonParams(quint8 rw, QByteArray params);     //103

    QJsonObject parseWAITCmd(quint8 rw, QByteArray params);             //110

    QJsonObject parseTRIGCmd(quint8 rw, QByteArray params);             //120

    QJsonObject parseIOMultiplexing(quint8 rw, QByteArray params);      //130
    QJsonObject parseIODO(quint8 rw, QByteArray params);                //131
    QJsonObject parseIOPWM(quint8 rw, QByteArray params);               //132
    QJsonObject parseIODI(quint8 rw, QByteArray params);                //133
    QJsonObject parseIOADC(quint8 rw, QByteArray params);               //134
    QJsonObject parseEMotor(quint8 rw, QByteArray params);              //135
    QJsonObject parseEMotorS(quint8 rw, QByteArray params);             //136
    QJsonObject parseColorSensor(quint8 rw, QByteArray params);         //137
    QJsonObject parseInfraredSensor(quint8 rw, QByteArray params);      //138
    QJsonObject parseIICInfo(quint8 rw, QByteArray params);             //139

    QJsonObject parseAngleSensorStaticError(quint8 rw, QByteArray params);  //140
    QJsonObject parseAngleSensorCoef(quint8 rw, QByteArray params);         //141
    QJsonObject parseBaseDecoderStaticError(quint8 rw, QByteArray params);  //142
    QJsonObject parseLRHandCalibrateValue(quint8 rw, QByteArray params);    //143

    QJsonObject parseWIFIConfigMode(quint8 rw, QByteArray params);          //150
    QJsonObject parseWIFISSID(quint8 rw, QByteArray params);                //151
    QJsonObject parseWIFIPassword(quint8 rw, QByteArray params);            //152
    QJsonObject parseWIFIIPAddress(quint8 rw, QByteArray params);           //153
    QJsonObject parseWIFINetmask(quint8 rw, QByteArray params);             //154
    QJsonObject parseWIFIGateway(quint8 rw, QByteArray params);             //155
    QJsonObject parseWIFIDNS(quint8 rw, QByteArray params);                 //156
    QJsonObject parseWIFIConnectStatus(quint8 rw, QByteArray params);       //157

    QJsonObject parseLostStep(quint8 rw, QByteArray params);                //170
    QJsonObject parseLostStepCmd(quint8 rw, QByteArray params);             //171
    QJsonObject parseCollisionCheck(quint8 rw, QByteArray params);          //172

    QJsonObject parseDeviceStatus(quint8 rw, QByteArray params);            //192
    QJsonObject parseDeviceRunAPP(quint8 rw, QByteArray params);            //193
    QJsonObject parseUpgradeStatus(quint8 rw, QByteArray params);           //194
    QJsonObject parseRunUpgrade(quint8 rw, QByteArray params);              //195
    QJsonObject parseStartTransmit(quint8 rw, QByteArray params);           //196
    QJsonObject parseUpgradeVeify(quint8 rw, QByteArray params);            //197
    QJsonObject parseDeviceRestart(quint8 rw, QByteArray params);           //198

    QJsonObject parseSeeedDistanceSensor(quint8 rw, QByteArray params);     //210
    QJsonObject parseSeeedTempSensor(quint8 rw, QByteArray params);         //211
    QJsonObject parseSeeedLightSensor(quint8 rw, QByteArray params);        //212
    QJsonObject parseSeeedColorSensor(quint8 rw, QByteArray params);        //213
    QJsonObject parseSeeedRGBLed(quint8 rw, QByteArray params);             //214
    QJsonObject parseMCUTemperature(quint8 rw, QByteArray params);          //215

    QJsonObject parseQueuedCmdStart(quint8 rw, QByteArray params);          //240
    QJsonObject parseQueuedCmdStop(quint8 rw, QByteArray params);           //241
    QJsonObject parseQueuedCmdForceStop(quint8 rw, QByteArray params);      //242
    QJsonObject parseQueuedCmdStartDownload(quint8 rw, QByteArray params);  //243
    QJsonObject parseQueuedCmdStopDownload(quint8 rw, QByteArray params);   //244
    QJsonObject parseQueuedCmdClear(quint8 rw, QByteArray params);          //245
    QJsonObject parseQueuedCmdCurrentIndex(quint8 rw, QByteArray params);   //246
    QJsonObject parseQueuedCmdLeftSpace(quint8 rw, QByteArray params);      //247
    QJsonObject parseQueuedCmdMotionFinish(quint8 rw, QByteArray params);   //248

    /* send message */

    /* id:0~9 */
    void encodeSetDeviceSN(PacketPayload &payload, QJsonObject params);         // 0
    void encodeGetDeviceSN(PacketPayload &payload, QJsonObject params);         // 0
    void encodeSetDeviceName(PacketPayload &payload, QJsonObject params);       // 1
    void encodeGetDeviceName(PacketPayload &payload, QJsonObject params);       // 1
    void encodeGetDeviceVersion(PacketPayload &payload, QJsonObject params);    // 2
    void encodeSetDeviceWithL(PacketPayload &payload, QJsonObject params);      // 3
    void encodeGetDeviceWithL(PacketPayload &payload, QJsonObject params);      // 3
    void encodeGetDeviceTime(PacketPayload &payload, QJsonObject params);       // 4
    void encodeGetDeviceID(PacketPayload &payload, QJsonObject params);         // 5
    void encodeGetProductName(PacketPayload &payload, QJsonObject params);      // 7
    void encodeSetOLEDDisplay(PacketPayload &payload, QJsonObject params);      // 8
    void encodeSetProgressBar(PacketPayload &payload, QJsonObject params);      // 9

    /* id:10~13 */
    void encodeGetPose(PacketPayload &payload, QJsonObject params);             // 10
    void encodeResetPose(PacketPayload &payload, QJsonObject params);           // 11
    void encodeGetPoseL(PacketPayload &payload, QJsonObject params);            // 13
    void encodeCheckPoseLimit(PacketPayload &payload, QJsonObject params);      // 15

    /* id:20 */
    void encodeGetAlarmsState(PacketPayload &payload, QJsonObject params);      // 20
    void encodeClearAllAlarmsState(PacketPayload &payload, QJsonObject params); // 20

    /* id:30~33 */
    void encodeSetHOMEParams(PacketPayload &payload, QJsonObject params);       // 30
    void encodeGetHOMEParams(PacketPayload &payload, QJsonObject params);       // 30
    void encodeSetHOMECmd(PacketPayload &payload, QJsonObject params);          // 31
    void encodeSetAutoLeveling(PacketPayload &payload, QJsonObject params);     // 32
    void encodeGetAutoLeveling(PacketPayload &payload, QJsonObject params);     // 32
    void encodeGetGoHomeStatus(PacketPayload &payload, QJsonObject params);     // 33

    /* id:40~42 */
    void encodeSetHHTTrigMode(PacketPayload &payload, QJsonObject params);          // 40
    void encodeGetHHTTrigMode(PacketPayload &payload, QJsonObject params);          // 40
    void encodeSetHHTTrigOutputEnabled(PacketPayload &payload, QJsonObject params); // 41
    void encodeGetHHTTrigOutputEnabled(PacketPayload &payload, QJsonObject params); // 41
    void encodeGetHHTTrigOutput(PacketPayload &payload, QJsonObject params);        // 42

    /* id:60~64 */
    void encodeSetEndEffectorParams(PacketPayload &payload, QJsonObject params);    // 60
    void encodeGetEndEffectorParams(PacketPayload &payload, QJsonObject params);    // 60
    void encodeSetEndEffectorLaser(PacketPayload &payload, QJsonObject params);     // 61
    void encodeGetEndEffectorLaser(PacketPayload &payload, QJsonObject params);     // 61
    void encodeSetEndEffectorSuctionCup(PacketPayload &payload, QJsonObject params);// 62
    void encodeGetEndEffectorSuctionCup(PacketPayload &payload, QJsonObject params);// 62
    void encodeSetEndEffectorGripper(PacketPayload &payload, QJsonObject params);   // 63
    void encodeGetEndEffectorGripper(PacketPayload &payload, QJsonObject params);   // 63
    void encodeSetEndEffectorType(PacketPayload &payload, QJsonObject params);      // 64
    void encodeGetEndEffectorType(PacketPayload &payload, QJsonObject params);      // 64

    /* id:65~69 */
    void encodeSetServoAngle(PacketPayload &payload, QJsonObject params);           // 65
    void encodeGetServoAngle(PacketPayload &payload, QJsonObject params);           // 65
    void encodeSetArmSpeedRatio(PacketPayload &payload, QJsonObject params);        // 66
    void encodeGetArmSpeedRatio(PacketPayload &payload, QJsonObject params);        // 66
    void encodeSetLSpeedRatio(PacketPayload &payload, QJsonObject params);          // 67
    void encodeGetLSpeedRatio(PacketPayload &payload, QJsonObject params);          // 67
    void encodeGetConfigAndStatus(PacketPayload &payload, QJsonObject params);      // 68
    void encodeGetRTStatus(PacketPayload &payload, QJsonObject params);             // 69

    /* id:70~74*/
    void encodeSetJOGJointParams(PacketPayload &payload, QJsonObject params);       // 70
    void encodeGetJOGJointParams(PacketPayload &payload, QJsonObject params);       // 70
    void encodeSetJOGCoordinateParams(PacketPayload &payload, QJsonObject params);  // 71
    void encodeGetJOGCoordinateParams(PacketPayload &payload, QJsonObject params);  // 71
    void encodeSetJOGCommonParams(PacketPayload &payload, QJsonObject params);      // 72
    void encodeGetJOGCommonParams(PacketPayload &payload, QJsonObject params);      // 72
    void encodeSetJOGCmd(PacketPayload &payload, QJsonObject params);               // 73
    void encodeSetJOGLParams(PacketPayload &payload, QJsonObject params);           // 74
    void encodeGetJOGLParams(PacketPayload &payload, QJsonObject params);           // 74

    /* id:80~89 */
    void encodeSetPTPJointParams(PacketPayload &payload, QJsonObject params);       // 80
    void encodeGetPTPJointParams(PacketPayload &payload, QJsonObject params);       // 80
    void encodeSetPTPCoordinateParams(PacketPayload &payload, QJsonObject params);  // 81
    void encodeGetPTPCoordinateParams(PacketPayload &payload, QJsonObject params);  // 81
    void encodeSetPTPJumpParams(PacketPayload &payload, QJsonObject params);        // 82
    void encodeGetPTPJumpParams(PacketPayload &payload, QJsonObject params);        // 82
    void encodeSetPTPCommonParams(PacketPayload &payload, QJsonObject params);      // 83
    void encodeGetPTPCommonParams(PacketPayload &payload, QJsonObject params);      // 83
    void encodeSetPTPCmd(PacketPayload &payload, QJsonObject params);               // 84
    void encodeSetPTPLParams(PacketPayload &payload, QJsonObject params);           // 85
    void encodeGetPTPLParams(PacketPayload &payload, QJsonObject params);           // 85
    void encodeSetPTPWithLCmd(PacketPayload &payload, QJsonObject params);          // 86
    void encodeSetPTPJump2Params(PacketPayload &payload, QJsonObject params);       // 87
    void encodeGetPTPJump2Params(PacketPayload &payload, QJsonObject params);       // 87
    void encodeSetPTPPOCmd(PacketPayload &payload, QJsonObject params);             // 88
    void encodeSetPTPPOWithLCmd(PacketPayload &payload, QJsonObject params);        // 89

    /* id:90~95 */
    void encodeSetCPParams(PacketPayload &payload, QJsonObject params);             // 90
    void encodeGetCPParams(PacketPayload &payload, QJsonObject params);             // 90
    void encodeSetCPCmd(PacketPayload &payload, QJsonObject params);                // 91
    void encodeSetCPLECmd(PacketPayload &payload, QJsonObject params);              // 92
    void encodeSetCPRHeadHoldEnable(PacketPayload &payload, QJsonObject params);    // 93
    void encodeGetCPRHeadHoldEnable(PacketPayload &payload, QJsonObject params);    // 93
    void encodeSetCPCommonParams(PacketPayload &payload, QJsonObject params);       // 94
    void encodeGetCPCommonParams(PacketPayload &payload, QJsonObject params);       // 94
    void encodeSetCP2Cmd(PacketPayload &payload, QJsonObject params);               // 95

    /* id:100~103 */
    void encodeSetARCParams(PacketPayload &payload, QJsonObject params);            // 100
    void encodeGetARCParams(PacketPayload &payload, QJsonObject params);            // 100
    void encodeSetARCCmd(PacketPayload &payload, QJsonObject params);               // 101
    void encodeSetCircleCmd(PacketPayload &payload, QJsonObject params);            // 102
    void encodeSetARCCommonParams(PacketPayload &payload, QJsonObject params);      // 103
    void encodeGetARCCommonParams(PacketPayload &payload, QJsonObject params);      // 103

    /* id:110 */
    void encodeSetWAITCmd(PacketPayload &payload, QJsonObject params);              // 110

    /* id:120 */
    void encodeSetTRIGCmd(PacketPayload &payload, QJsonObject params);              // 120

    /* id:130~139 */
    void encodeSetIOMultiplexing(PacketPayload &payload, QJsonObject params);       // 130
    void encodeGetIOMultiplexing(PacketPayload &payload, QJsonObject params);       // 130
    void encodeSetIODO(PacketPayload &payload, QJsonObject params);                 // 131
    void encodeGetIODO(PacketPayload &payload, QJsonObject params);                 // 131
    void encodeSetIOPWM(PacketPayload &payload, QJsonObject params);                // 132
    void encodeGetIOPWM(PacketPayload &payload, QJsonObject params);                // 132
    void encodeGetIODI(PacketPayload &payload, QJsonObject params);                 // 133
    void encodeGetIOADC(PacketPayload &payload, QJsonObject params);                // 134
    void encodeSetEMotor(PacketPayload &payload, QJsonObject params);               // 135
    void encodeSetEMotorS(PacketPayload &payload, QJsonObject params);              // 136
    void encodeSetColorSensor(PacketPayload &payload, QJsonObject params);          // 137
    void encodeGetColorSensor(PacketPayload &payload, QJsonObject params);          // 137
    void encodeSetInfraredSensor(PacketPayload &payload, QJsonObject params);       // 138
    void encodeGetInfraredSensor(PacketPayload &payload, QJsonObject params);       // 138
    void encodeSetIICInfo(PacketPayload &payload, QJsonObject params);              // 139
    void encodeGetIICInfo(PacketPayload &payload, QJsonObject params);              // 139

    /* id:140~143 */
    void encodeSetAngleSensorStaticError(PacketPayload &payload, QJsonObject params);//140
    void encodeGetAngleSensorStaticError(PacketPayload &payload, QJsonObject params);//140
    void encodeSetAngleSensorCoef(PacketPayload &payload, QJsonObject params);      // 141
    void encodeGetAngleSensorCoef(PacketPayload &payload, QJsonObject params);      // 141
    void encodeSetBaseDecoderStaticError(PacketPayload &payload, QJsonObject params);//142
    void encodeGetBaseDecoderStaticError(PacketPayload &payload, QJsonObject params);//142
    void encodeSetLRHandCalibrateValue(PacketPayload &payload, QJsonObject params); // 143
    void encodeGetLRHandCalibrateValue(PacketPayload &payload, QJsonObject params); // 143

    /* id:150~157 */
    void encodeSetWIFIConfigMode(PacketPayload &payload, QJsonObject params);       // 150
    void encodeGetWIFIConfigMode(PacketPayload &payload, QJsonObject params);       // 150
    void encodeSetWIFISSID(PacketPayload &payload, QJsonObject params);             // 151
    void encodeGetWIFISSID(PacketPayload &payload, QJsonObject params);             // 151
    void encodeSetWIFIPassword(PacketPayload &payload, QJsonObject params);         // 152
    void encodeGetWIFIPassword(PacketPayload &payload, QJsonObject params);         // 152
    void encodeSetWIFIIPAddress(PacketPayload &payload, QJsonObject params);        // 153
    void encodeGetWIFIIPAddress(PacketPayload &payload, QJsonObject params);        // 153
    void encodeSetWIFINetmask(PacketPayload &payload, QJsonObject params);          // 154
    void encodeGetWIFINetmask(PacketPayload &payload, QJsonObject params);          // 154
    void encodeSetWIFIGateway(PacketPayload &payload, QJsonObject params);          // 155
    void encodeGetWIFIGateway(PacketPayload &payload, QJsonObject params);          // 155
    void encodeSetWIFIDNS(PacketPayload &payload, QJsonObject params);              // 156
    void encodeGetWIFIDNS(PacketPayload &payload, QJsonObject params);              // 156
    void encodeGetWIFIConnectStatus(PacketPayload &payload, QJsonObject params);    // 157

    /* id:170~172 */
    void encodeSetLostStepValue(PacketPayload &payload, QJsonObject params);        // 170
    void encodeSetLostStepCmd(PacketPayload &payload, QJsonObject params);          // 171
    void encodeSetCollisionCheck(PacketPayload &payload, QJsonObject params);       // 172
    void encodeGetCollisionCheck(PacketPayload &payload, QJsonObject params);       // 172

    /* id:192~198 */
    void encodeGetDeviceStatus(PacketPayload &payload, QJsonObject params);         // 192
    void encodeSetDeviceRunAPP(PacketPayload &payload, QJsonObject params);         // 193
    void encodeSetUpgradeStatus(PacketPayload &payload, QJsonObject params);        // 194
    void encodeGetUpgradeStatus(PacketPayload &payload, QJsonObject params);        // 194
    void encodeSetRunUpgrade(PacketPayload &payload, QJsonObject params);           // 195
    void encodeSetStartTransmit(PacketPayload &payload, QJsonObject params);        // 196
    void encodeSetUpgradeVeify(PacketPayload &payload, QJsonObject params);         // 197
    void encodeSetDeviceRestart(PacketPayload &payload, QJsonObject params);        // 198

    /* id:210~215 */
    void encodeGetSeeedDistanceSensor(PacketPayload &payload, QJsonObject params);  // 210
    void encodeSetSeeedTempSensor(PacketPayload &payload, QJsonObject params);      // 211
    void encodeGetSeeedTempSensor(PacketPayload &payload, QJsonObject params);      // 211
    void encodeSetSeeedLightSensor(PacketPayload &payload, QJsonObject params);     // 212
    void encodeGetSeeedLightSensor(PacketPayload &payload, QJsonObject params);     // 212
    void encodeSetSeeedColorSensor(PacketPayload &payload, QJsonObject params);     // 213
    void encodeGetSeeedColorSensor(PacketPayload &payload, QJsonObject params);     // 213
    void encodeSetSeeedRGBLed(PacketPayload &payload, QJsonObject params);          // 214
    void encodeGetMCUTemperature(PacketPayload &payload, QJsonObject params);       // 215

    /* id:240~246 */
    void encodeSetQueuedCmdStart(PacketPayload &payload, QJsonObject params);       // 240
    void encodeSetQueuedCmdStop(PacketPayload &payload, QJsonObject params);        // 241
    void encodeSetQueuedCmdForceStop(PacketPayload &payload, QJsonObject params);   // 242
    void encodeSetQueuedCmdStartDownload(PacketPayload &payload, QJsonObject params);//243
    void encodeSetQueuedCmdStopDownload(PacketPayload &payload, QJsonObject params);// 244
    void encodeSetQueuedCmdClear(PacketPayload &payload, QJsonObject params);       // 245
    void encodeGetQueuedCmdCurrentIndex(PacketPayload &payload, QJsonObject params);// 246
    void encodeGetQueuedCmdLeftSpace(PacketPayload &payload, QJsonObject params);   // 247

public:
#pragma pack(push, 1)
    struct PoseStruct {
        float x;
        float y;
        float z;
        float r;
        float jointAngle[4];
    };

    struct PositionStruct {
        float x;
        float y;
        float z;
        float r;
    };

    struct VelocityStruct {
        float velocity;
        float acceleration;
    };

    struct VelocityArrayStruct {
        float velocity[4];
        float acceleration[4];
    };

    struct VelocityRatioStruct {
        float velocityRatio;
        float accelerationRatio;
    };

    struct PTPJump2ParamsStruct {
        float startJumpHeight;
        float endJumpHeight;
        float zLimit;
    };

    /* COLOR */
    struct ColorStruct {
        quint8 red;
        quint8 green;
        quint8 blue;
    };

    struct SeeedColorStruct {
        quint16 red;
        quint16 green;
        quint16 blue;
        quint16 cct;
    };

    /* ARC */
    struct ARCCmdStruct {
        PositionStruct cirPoint;
        PositionStruct toPoint;
    };

    struct ARCParamsStruct {
        float xyzVelocity;
        float rVelocity;
        float xyzAcceleration;
        float rAcceleration;
    };

    struct CircleCmdStruct {
        PositionStruct cirPoint;
        PositionStruct toPoint;
        quint32 count;
    };

    /* CP */
    struct CPCmdStruct {
        quint8 cpMode;
        float x;
        float y;
        float z;
        union {
            float velocity;
            float power;
        };
    };

    struct CPParamsStruct {
        float targetAcc;
        float junctionVel;
        union {
            float acc;
            float period;
        };
        quint8 isRealTimeTrack;
    };

    struct CP2CmdStruct {
        quint8 cpMode;
        float x;
        float y;
        float z;
    };

    /* PTP */
    struct PTPCmdStruct {
        quint8 ptpMode;
        float x;
        float y;
        float z;
        float r;
    };

    struct PTPCoordinateParamsStruct {
        float xyzVelocity;
        float rVelocity;
        float xyzAcceleration;
        float rAcceleration;
    };

    struct PTPWithLCmdStruct {
        quint8 ptpMode;
        float x;
        float y;
        float z;
        float r;
        float l;
    };

    struct POCmdStruct {
        quint8 ratio;
        quint16 port;
        quint8 level;
    };

    struct TRIGCmdStruct {
        quint8 port;
        quint8 mode;
        quint8 condition;
        quint16 threshold;
    };

    struct IOPWMStruct {
        quint8 port;
        float frequency;
        float dutyCycle;
    };

    struct EMotorStruct {
        quint8 index;
        quint8 isEnabled;
        int speed;
    };

    struct EMotorSStruct {
        quint8 index;
        quint8 isEnabled;
        int speed;
        quint32 distance;
    };

    /* Collision */
    struct CollisionCheckStruct {
        quint8 enable;
        float threshold;
    };

    /* WIFI */
    struct WIFIIPAddressStruct {
        quint8 dhcp;
        quint8 address[4];
    };

    struct WifiAddressStruct {
        quint8 address[4];
    };

#pragma pack(pop)
};

#endif // DMAGICIANPROTOCOL_H
